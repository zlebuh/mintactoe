@page "/game/{GameId}/{Token}"
@using System.Text.Json
@using Zlebuh.MinTacToe.APIModel
@using Zlebuh.MinTacToe.Model
@using Zlebuh.MinTacToe.UI.Services
@using Zlebuh.MinTacToe.UI.Components
@using static Zlebuh.MinTacToe.UI.Components.GameInfo
@inject HttpClient Http
@inject ICookieService CookieService
@inject ISupabaseRealtime SupabaseRealtime
@implements IAsyncDisposable
@implements ICanReactOnGameStateChange

<container>
    <PageTitle>Online Game</PageTitle>
    <GameInfo PlayerOnTurn="@game.GameState.PlayerOnTurn"
    IsGameOver="@game.GameState.IsGameOver"
    Winner="@game.GameState.Winner"
    Message="message" />

    <GameGrid Rows="@rules.Rows"
    Columns="@rules.Columns"
    Grid="@grid"
    Colors="@colors"
    HighlightedClass="@highlightedClass"
    OnCellClick="CellClicked" />

    <Rules />
</container>


@code {
    [Parameter]
    public string GameId { get; set; } = string.Empty;
    [Parameter]
    public string Token { get; set; } = string.Empty;

    private string userId = string.Empty;
    private bool tokenIsValid = false;

    private const string UserIdCookieName = "userid";
    private const int UserIdCookieExpirationDays = 30;
    private static readonly Zlebuh.MinTacToe.Model.Game DefaultGame = new();
    private static Zlebuh.MinTacToe.Model.Rules DefaultRules => DefaultGame.Rules;

    private Zlebuh.MinTacToe.Model.Game game = DefaultGame;
    private string[,] grid = new string[DefaultRules.Rows, DefaultRules.Columns];
    private string[,] colors = new string[DefaultRules.Rows, DefaultRules.Columns];
    private string[,] highlightedClass = new string[DefaultRules.Rows, DefaultRules.Columns];
    private GameInfoMessage? message = new(){Message = new("Game is not loaded yet.")};
    private List<Coordinate> highlighted = new();
    private Zlebuh.MinTacToe.Model.Rules rules = DefaultRules;

    protected override async Task OnParametersSetAsync()
    {
        await RefreshUserIdCookie();
        await CheckToken();
        await ConnectToAGame();
        await base.OnParametersSetAsync();
    }

    protected async override Task OnInitializedAsync()
    {
        var response = await Http.GetAsync($"api/gamestate/{GameId}")
            ?? throw new Exception("Failed to load game state.");
        if (response.IsSuccessStatusCode)
        {
            GameStateResponse resp = await response.Content.ReadFromJsonAsync<GameStateResponse>()
                ?? throw new Exception("Failed to deserialize game state response.");
            game = await GameSerializer.DeserializeGame(resp.GameState);
            rules = game.Rules;
            grid = new string[rules.Rows, rules.Columns];
            colors = new string[rules.Rows, rules.Columns];
            highlightedClass = new string[rules.Rows, rules.Columns];
        }


        await base.OnInitializedAsync();
    } 

    public async ValueTask DisposeAsync()
    {
        await SupabaseRealtime.StopRealtime(this);
    }

    private async Task CellClicked((int row, int col) pos)
    {
        if (!tokenIsValid)
        {
            return;
        }
        var makeMoveRequest = new MakeMoveRequest()
			{
				GameId = GameId,
				UserId = userId,
				Token = Token,
                CoordinateCol = pos.col,
                CoordinateRow = pos.row
			};

        var response = await Http.PostAsJsonAsync("api/gamestate", makeMoveRequest);
        if (response.IsSuccessStatusCode)
        {
            var makeMoveResponse = await response.Content.ReadFromJsonAsync<MakeMoveResponse>();                        				
            message = new() { Message = new($"({makeMoveResponse?.ErrorCode}){makeMoveResponse?.Message}") };          
        }
        else
        {
            Console.WriteLine(response.Content);
            message = new() {Message = new("Error making move."), Type = GameInfoMessageType.Error};            
        }
    }


    private async Task RefreshUserIdCookie()
    {
        var userId = await CookieService.GetCookie(UserIdCookieName);
        var userRequest = new UserRequest()
		{
			UserId = userId
		};

        var response = await Http.PostAsJsonAsync("api/user", userRequest);
        if (response.IsSuccessStatusCode)
        {
            var userResponse = await response.Content.ReadFromJsonAsync<UserResponse>();
            if (userResponse != null)
            {
                userId = userResponse.UserId;
            }
        }

        await CookieService.SetCookie(UserIdCookieName, userId, UserIdCookieExpirationDays);
        this.userId = userId;
    }

    private async Task ConnectToAGame()
    {
        await SupabaseRealtime.StartRealtime(GameId, this);
    }

    [JSInvokable]
    public async Task OnGameStateChanged(string json)
    {
        Console.WriteLine("I do work!");
        using JsonDocument document = JsonDocument.Parse(json);
        string gameState = document.RootElement.GetProperty("game_state").ToString() ?? string.Empty;
        var g = await GameSerializer.DeserializeGame(gameState);
        RefreshGameBoard(g);        
    }

    private void RefreshGameBoard(Zlebuh.MinTacToe.Model.Game g)
    {
        game = g;
        foreach (Coordinate h in highlighted)
        {
            highlightedClass[h.Row, h.Col] = string.Empty;
        }
        highlighted.Clear();
        foreach (Coordinate coordinateChanged in g.GameState.Changes)
        {
            Field f = game.GameState.Grid[coordinateChanged];
            highlightedClass[coordinateChanged.Row, coordinateChanged.Col] = "highlighted";
            highlighted.Add(coordinateChanged);
            Console.WriteLine(coordinateChanged.Row);
            Console.WriteLine(coordinateChanged.Col);
            Console.WriteLine(f.Player);
        }

        for (int i = 0; i < g.Rules.Rows; i++)
        {
            for (int j = 0; j < g.Rules.Columns; j++)
            {
                RefreshField(i, j, g.GameState.Grid[new(i, j)], g.GameState.IsGameOver);
            }
        }

        StateHasChanged();
    }

    private void RefreshField(int row, int col, Field f, bool showMines = false)
    {
        string outcome;
        string background;
        if (f.Generated)
        {
            if (f.Player.HasValue)
            {
                if (f.IsMine)
                {
                    outcome = string.Empty;
                    background = "#3a452d";
                }
                else
                {
                    outcome = $"{f.SurroundedByNotExplodedMines}";
                    background = f.Player.ToColor();
                }
            }
            else
            {
                if (f.IsMine && showMines)
                {
                    outcome = string.Empty;
                    background = "#3a452d";
                }
                else
                {
                    outcome = string.Empty;
                    background = "transparent";
                }
            }
        }
        else
        {
            outcome = string.Empty;
            background = "transparent";
        }
        grid[row, col] = outcome;
        colors[row, col] = background;
    }

    private async Task CheckToken()
    {
		var tokenValidityRequest = new TokenValidityRequest()
		{
			GameId = GameId,
			Token = Token,
			UserId = userId
		};

		var response = await Http.PostAsJsonAsync("api/game/token", tokenValidityRequest);

		if (response.IsSuccessStatusCode)
		{
			var tokenValidityResponse = await response.Content.ReadFromJsonAsync<TokenValidityResponse>();
			if (tokenValidityResponse != null && !tokenValidityResponse.IsValid)
			{
				// Handle invalid token scenario
				Console.WriteLine("Invalid token.");
			}
			else
			{
				tokenIsValid = true;
			}
		}
		else
		{
			Console.WriteLine("Error checking token validity.");
		}
	}
}
