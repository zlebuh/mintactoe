<div class="game-grid">
    <div class="table">
        <div class="td"></div>
        @for (int col = 0; col < Columns; col++)
        {
            <div class="td">@(Convert.ToChar('A' + col))</div>
        }        
        @for (int row = 0; row < Rows; row++)
        {
            <div class="td">@(row + 1)</div>
            @for (int col = 0; col < Columns; col++)
            {
                int r = row;
                int c = col;
                <GameCell Value="@Grid[r, c]"
                            Color="@Colors[r, c]"
                            HighlightedClass="@HighlightedClass[r, c]"
                            OnClick="() => OnCellClick.InvokeAsync((r, c))" />
            }
        }
    </div>
</div>
@*     <table>
        <thead>
            <tr>
                <th></th>
                @for (int col = 0; col < Columns; col++)
                {
                    <th>@(Convert.ToChar('A' + col))</th>
                }
            </tr>
        </thead>
        <tbody>
            @for (int row = 0; row < Rows; row++)
            {
                <tr>
                    <th>@(row + 1)</th>
                    @for (int col = 0; col < Columns; col++)
                    {
                        int r = row;
                        int c = col;
                        <GameCell Value="@Grid[r, c]"
                                  Color="@Colors[r, c]"
                                  HighlightedClass="@HighlightedClass[r, c]"
                                  OnClick="() => OnCellClick.InvokeAsync((r, c))" />
                    }
                </tr>
            }
        </tbody>
    </table> *@

@code {
    [Parameter] public int Rows { get; set; }
    [Parameter] public int Columns { get; set; }
    [Parameter] public string[,] Grid { get; set; } = default!;
    [Parameter] public string[,] Colors { get; set; } = default!;
    [Parameter] public string[,] HighlightedClass { get; set; } = default!;
    [Parameter] public EventCallback<(int row, int col)> OnCellClick { get; set; }
}