@page "/"
@using Zlebuh.MinTacToe.GameEngine
@using Zlebuh.MinTacToe.GameEngine.Exceptions
@using Zlebuh.MinTacToe.GameModel
@using Zlebuh.MinTacToe.UI.Components
@using static Zlebuh.MinTacToe.UI.Components.GameInfo

<container>
    <PageTitle>Game</PageTitle>
    <GameInfo 
        PlayerOnTurn="@game.GameState.PlayerOnTurn"
        IsGameOver="@game.GameState.IsGameOver"
        Winner="@game.GameState.Winner"
        Message="message" />
    
    <GameGrid 
        Rows="@rules.Rows"
        Columns="@rules.Columns"
        Grid="@grid"
        Colors="@colors"
        HighlightedClass="@highlightedClass"
        OnCellClick="CellClicked" />

    <Rules />
</container>


@code {
    [Parameter]
    public byte? Rows { get; set; }

    private GameModel.Rules rules = new()
    {
        Rows = 16,
        Columns = 16
    };
    private GameModel.Game game = null!;
    private string[,] grid = null!;
    private string[,] colors = null!;
    private string[,] highlightedClass = null!;
    private GameInfoMessage? message = null;
    private List<Coordinate> highlighted = new();

    protected override void OnInitialized()
    {
        grid = new string[rules.Rows, rules.Columns];
        colors = new string[rules.Rows, rules.Columns];
        highlightedClass = new string[rules.Rows, rules.Columns];

        game = GameControl.Initialize(rules);
    }

    private void RefreshField(int row, int col, Field f, bool showMines = false)
    {
        string outcome;
        string background;
        if (f.Generated)
        {
            if (f.Player.HasValue)
            {
                if (f.IsMine)
                {
                    outcome = string.Empty;
                    background = "#3a452d";
                }
                else
                {
                    outcome = $"{f.SurroundedByNotExplodedMines}";
                    background = f.Player.ToColor();
                }
            }
            else
            {
                if (f.IsMine && showMines)
                {
                    outcome = string.Empty;
                    background = "#3a452d";
                }
                else
                {
                    outcome = string.Empty;
                    background = "transparent";
                }
            }
        }
        else
        {
            outcome = string.Empty;
            background = "transparent";
        }
        grid[row, col] = outcome;
        colors[row, col] = background;
    }

    private void CellClicked((int row, int col) pos)
    {
        int row = pos.row;
        int col = pos.col;
        message = null;
        foreach (Coordinate h in highlighted)
        {
            highlightedClass[h.Row, h.Col] = string.Empty;
        }
        highlighted.Clear();

        if (game.GameState.IsGameOver)
        {           
            return;
        }
        try
        {
            GameControl.MakeMove(game, game.GameState.PlayerOnTurn!.Value, new(row, col));
        }
        catch (FieldOccupiedException e)
        {
            message = new() { Message = new($"Field {Convert.ToChar('A' + e.OccupiedCoordinate.Col)}{e.OccupiedCoordinate.Row + 1} is occupied.")};
        }
        catch (MinTacToeException e)
        {
            message = new() { Message = new($"Unexpected internal error. Please report it via github issues.\n{e.Message}\n{e.StackTrace}"), Type = GameInfoMessageType.Error };
        }
        catch (Exception e)
        {
            message = new() { Message = new($"Unexpected error. Please report it via github issues.\n{e.Message}\n{e.StackTrace}"), Type = GameInfoMessageType.Error};
        }

        foreach (Coordinate coordinateChanged in game.GameState.Changes)
        {
				Field f = game.GameState.Grid[coordinateChanged];
            highlightedClass[coordinateChanged.Row, coordinateChanged.Col] = "highlighted";
            RefreshField(coordinateChanged.Row, coordinateChanged.Col, f);
            highlighted.Add(coordinateChanged);
        }
        if (game.GameState.IsGameOver)
        {
            for (int i = 0; i < rules.Rows; i++)
            {
                for (int j = 0; j < rules.Columns; j++)
                {
                    RefreshField(i, j, game.GameState.Grid[new(i, j)], true);
                }
            }
        }
    }   
}